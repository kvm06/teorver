import numpy as np
import math

#1. Находим ковариацию по формуле cov = M(XY)−M(X)M(Y)
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
Mzp = np.mean(zp)
Mks = np.mean(ks)
Mzp_ks = np.mean(zp * ks)
cov = Mzp_ks - (Mzp * Mks)
print(cov) #9157.839999999997
print(np.cov(zp, ks, ddof=0)) #[[ 3494.64  9157.84]
                             #[ 9157.84 30468.89]]
#находим коэффициент корреляции Пирсона по формуле
corcoef = cov / (np.std(zp) * np.std(ks))
print(corcoef) #0.8874900920739158
print(np.corrcoef(zp, ks)) #[[1.         0.88749009]
                            #[0.88749009 1.        ]]
#Ответ: Коэффициент корреляции Пирсона равен 0.88749009

#2. #Создадим массив a - с результатами выборки
a = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]
#Объем выборки равен 10
n = 10
#Найдем среднее значение выборки
X = np.mean(a) #118.1
#Найдем несмещенное стандартное отклонение (сигма)
S = np.std(a, ddof=1) #10.54566788359614
#Т.к. сигма генеральной совокупности неизвестна, для нахождения доверительного интервала
# используем критерий стьюдента (t). Число степеней свободы v = 9 (n-1), a(альфа) = 5 (100-95)
# Критерий стьюдента t для а/2 по таблице равен 2.262
Imin = X - 2.262 * (S / math.sqrt(n)) #110.55660776308164
Imax = X + 2.262 * (S / math.sqrt(n)) #125.64339223691834
#Ответ: Доверительный интервал с надежностью 0.95 составляет [110.55; 125.64]

#3. # Обозначим объем выборки через n
n = 27
#Дисперсия равна 25
D = 25
#Среднее квадратичное отклонение S = квадратному корню из дисперсии
S = math.sqrt(D)
#Среднее выборочное равно 174.2
X = 174.2
#Поскольку дисперсия генеральной совокупности известна, находим доверительный интервал по z-критерию
#Альфа (a) = 5% или 0.05
#Находим значение по z-Таблице для a/2 = 1.96
Imin = X - 1.96 * (S / math.sqrt(n)) #172.31398912064722
Imax = X + 1.96 * (S / math.sqrt(n)) #176.08601087935276
#Ответ: Доверительный интервал с надежностью 0.95 составляет [172.31; 176.09]
